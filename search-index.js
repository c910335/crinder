crystal_doc_search_index_callback({"repository_name":"crinder","body":"# Crinder\n\n[![Crystal CI](https://github.com/c910335/crinder/actions/workflows/crystal.yml/badge.svg)](https://github.com/c910335/crinder/actions/workflows/crystal.yml)\n[![GitHub releases](https://img.shields.io/github/release/c910335/crinder.svg)](https://github.com/c910335/crinder/releases)\n[![GitHub license](https://img.shields.io/github/license/c910335/crinder.svg)](https://github.com/c910335/crinder/blob/master/LICENSE)\n\nClass based json renderer in Crystal\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  crinder:\n    github: c910335/crinder\n```\n\n## Usage\n\n### Basic\n\n```crystal\nrequire \"crinder\"\n\nrecord Todo, name : String, priority : Int32, expires_at : Time?, created_at : Time?, updated_at : Time?\n\nclass TodoRenderer < Crinder::Base(Todo)\n  field name : String, as: title\n  field priority : Int, value: ->{ priority * 10 }\n  field expires_at : String, as: deadline, unless: ->{ priority < 3 }\n  field created_at : String, if: ->{ created_at? }\n  field updated : Bool, value: updated?\n\n  option created_at? : Bool = false\n\n  def self.updated?\n    !object.updated_at.nil?\n  end\nend\n\ntime = Time.utc(2018, 3, 14, 19, 55, 7)\ntodo = Todo.new(\"qaq\", 8, time + 20.hours, time, nil)\n\nTodoRenderer.render(todo, created_at?: true) # => \"{\\\"title\\\":\\\"qaq\\\",\\\"priority\\\":80,\\\"deadline\\\":\\\"2018-03-15 15:55:07 UTC\\\",\\\"created_at\\\":\\\"2018-03-14 19:55:07 UTC\\\",\\\"updated\\\":false}\"\n```\n\n### Inheritance\n\n```crystal\nclass AnotherTodoRenderer < TodoRenderer\n  field expires_at : String, unless: ->{ priority < 1 }\n  field updated_at : String\n  remove updated\nend\n\ntodo = Todo.new(\"wow\", 6, time + 20.hours, time, time + 10.hours)\n\nAnotherTodoRenderer.render(todo) # => \"{\\\"title\\\":\\\"wow\\\",\\\"priority\\\":60,\\\"expires_at\\\":\\\"2018-03-15 15:55:07 UTC\\\",\\\"updated_at\\\":\\\"2018-03-15 05:55:07 UTC\\\"}\"\n```\n\n### Array\n\n```crystal\ntodos = [Todo.new(\"www\", 8, time + 20.hours, time, nil), Todo.new(\"api\", 10, time + 21.hours, time, nil)]\n\nTodoRenderer.render(todos) # => \"[{\\\"title\\\":\\\"www\\\",\\\"priority\\\":80,\\\"deadline\\\":\\\"2018-03-15 15:55:07 UTC\\\",\\\"updated\\\":false},{\\\"title\\\":\\\"api\\\",\\\"priority\\\":100,\\\"deadline\\\":\\\"2018-03-15 16:55:07 UTC\\\",\\\"updated\\\":false}]\"\n```\n\n### Nested\n\n```crystal\nclass TimeRenderer < Crinder::Base(Time?)\n  field year : Int\n  field month : Int\n  field day : Int\n  field hour : Int\n  field minute : Int\n  field second : Int\nend\n\nclass NestedTodoRenderer < TodoRenderer\n  remove expires_at\n  remove updated\n  field created_at, with: TimeRenderer\nend\n\ntodo = Todo.new(\"wtf\", 3, time + 20.hours, time, nil)\n\nNestedTodoRenderer.render(todo) # => \"{\\\"title\\\":\\\"wtf\\\",\\\"priority\\\":30,\\\"created_at\\\":{\\\"year\\\":2018,\\\"month\\\":3,\\\"day\\\":14,\\\"hour\\\":19,\\\"minute\\\":55,\\\"second\\\":7}}\"\n```\n\n### Nilable\n\n```crystal\nclass NilableTodoRenderer < TodoRenderer\n  field expires_at : String?\n  field created_at : String?\n  field updated_at : String?\n  remove updated\nend\n\ntodo = Todo.new(\"IDK\", 10, nil, nil, nil)\n\nNilableTodoRenderer.render(todo) # => \"{\\\"title\\\":\\\"IDK\\\",\\\"priority\\\":100,\\\"expires_at\\\":null,\\\"created_at\\\":null,\\\"updated_at\\\":null}\"\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/c910335/crinder/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [c910335](https://github.com/c910335) Tatsiujin Chin - creator, maintainer\n","program":{"html_id":"crinder/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"crinder","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crinder/Crinder","path":"Crinder.html","kind":"module","full_name":"Crinder","name":"Crinder","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crinder/field.cr","line_number":1,"url":null},{"filename":"src/crinder/version.cr","line_number":1,"url":null}],"repository_name":"crinder","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.4.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crinder/Crinder/Base","path":"Crinder/Base.html","kind":"class","full_name":"Crinder::Base(T)","name":"Base","abstract":false,"superclass":{"html_id":"crinder/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crinder/Crinder/Option","kind":"module","full_name":"Crinder::Option","name":"Option"},{"html_id":"crinder/Crinder/Field","kind":"module","full_name":"Crinder::Field","name":"Field"},{"html_id":"crinder/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crinder/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crinder.cr","line_number":27,"url":null}],"repository_name":"crinder","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"crinder/Crinder/Field","kind":"module","full_name":"Crinder::Field","name":"Field"},{"html_id":"crinder/Crinder/Option","kind":"module","full_name":"Crinder::Option","name":"Option"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crinder/Crinder","kind":"module","full_name":"Crinder","name":"Crinder"},"doc":"`Crinder::Base` is the base renderer of type `T`.\n\nTo define your own renderer, you need to inherit `Crinder::Base` with specific type and declare the fields with `Crinder::Field.field`.\n\nFor example, this is a renderer of [Time](https://crystal-lang.org/api/latest/Time.html).\n\n```\nclass TimeRenderer < Crinder::Base(Time)\n  field year : Int\n  field month : Int\n  field day : Int\n  field hour : Int\n  field minute : Int\n  field second : Int\nend\n```\n\nThen `.render` will be auto generated.\n\n```\ntime = Time.new(2018, 3, 15, 16, 21, 1)\nTimeRenderer.render(time) # => \"{\\\"year\\\":2018,\\\"month\\\":3,\\\"day\\\":15,\\\"hour\\\":16,\\\"minute\\\":21,\\\"second\\\":1}\"\n```","summary":"<p><code><a href=\"../Crinder/Base.html\">Crinder::Base</a></code> is the base renderer of type <code>T</code>.</p>","class_methods":[{"id":"object-class-method","html_id":"object-class-method","name":"object","doc":"the getter of the object to be rendered, which can be used in `value`, `if` or `unless`","summary":"<p>the getter of the object to be rendered, which can be used in <code>value</code>, <code>if</code> or <code>unless</code></p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crinder.cr","line_number":34,"url":null},"def":{"name":"object","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@object.not_nil!"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crinder/Crinder/Field","path":"Crinder/Field.html","kind":"module","full_name":"Crinder::Field","name":"Field","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crinder/field.cr","line_number":1,"url":null}],"repository_name":"crinder","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"crinder/Crinder/Base","kind":"class","full_name":"Crinder::Base(T)","name":"Base"}],"namespace":{"html_id":"crinder/Crinder","kind":"module","full_name":"Crinder","name":"Crinder"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"field(decl,**nargs)-macro","html_id":"field(decl,**nargs)-macro","name":"field","doc":"Defines a field.\n\nThis also creates an alias `{{name}}` for `object.{{name}}`, which can be used in `value`, `if` or `unless`.\n\n### Example\n\nSee [README](../index.html) or `Crinder::Base`.\n\n### Usage\n\n`field` requries a name or a type declaration and a series of named arguments.\n\n```\nfield name : type, **named_arguments\n```\n\n- **name**: (required) the field name to be rendered\n- **as**: the name to be replaced in the rendered json\n- **type**: the type for auto casting. For example, if it is `String`, `#to_s` of the field will be called for rendering. This is JSON Type but not Crystal Type, so it must be one of [JSON::Any::Type](https://crystal-lang.org/api/latest/JSON/Any/Type.html), and it should be `Int` instead of `Int64` or `Int32` if this field is integer, and so does `Float`. If it is `Nil` or not provided, no casting method will be performed.\n- **value**: a lambda, a class method or a constant to replace the value. By default, it is an auto generated class method `name` which casting the field to `type`. If `value` is provided, `type` becomes useless because `value` replaces the auto generated class method. However, it is still recommended to declare `type` for understandability. Don't use `value` and `as` together because it makes `name` meaningless.\n- **with**: a renderer for this field. This field will be filtered by `value` before passing to it. It is not necessary to be a subclass of `Crinder::Base`, but it must have the class method `render(object : T | Array(T), json : JSON::Builder)` where `T` is the original type of this field.\n- **options**: options passing to the `with` renderer.\n- **if**: a lambda, a class method or a constant to determine whether to show this field.\n- **unless**: opposite of `if`. If both `if` and `unless` are provided, this field is only showed when `if` is *truthy* and `unless` is *falsey*.","summary":"<p>Defines a field.</p>","abstract":false,"args":[{"name":"decl","doc":null,"default_value":"","external_name":"decl","restriction":""}],"args_string":"(decl, **nargs)","location":{"filename":"src/crinder/field.cr","line_number":26,"url":null},"def":{"name":"field","args":[{"name":"decl","doc":null,"default_value":"","external_name":"decl","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% name = decl\ntype = Object\nnilable = false\nif decl.is_a?(TypeDeclaration)\n  name = decl.var\n  type = decl.type\nend\nif type.is_a?(Union)\n  nilable = type.types.any? do |__arg0|\n    __arg0.resolve.nilable?\n  end\n  type = type.types.reject do |__arg1|\n    __arg1.resolve.nilable?\n  end[0]\nend\nif type.is_a?(Path) || type.is_a?(Generic)\n  type = type.resolve\n  nilable = nilable || (type == Nil)\nend\nname = name.id\nFIELDS[name] = nargs || ({} of Nil => Nil)\nFIELDS[name][:type] = type\nFIELDS[name][:nilable] = nilable\n %}\n\n    __field(\n{{ name }}\n)\n  \n"}},{"id":"remove(name)-macro","html_id":"remove(name)-macro","name":"remove","doc":"Undefines a field.","summary":"<p>Undefines a field.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","location":{"filename":"src/crinder/field.cr","line_number":92,"url":null},"def":{"name":"remove","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% name = name.id %}\n\n    \n{% FIELDS[name] = nil %}\n\n\n    def self.\n{{ name }}\n\n      nil\n    \nend\n\n    def self.__casted_\n{{ name }}\n\n      nil\n    \nend\n  \n"}}],"types":[]},{"html_id":"crinder/Crinder/Option","path":"Crinder/Option.html","kind":"module","full_name":"Crinder::Option","name":"Option","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crinder/option.cr","line_number":1,"url":null}],"repository_name":"crinder","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"crinder/Crinder/Base","kind":"class","full_name":"Crinder::Base(T)","name":"Base"}],"namespace":{"html_id":"crinder/Crinder","kind":"module","full_name":"Crinder","name":"Crinder"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"option(decl)-macro","html_id":"option(decl)-macro","name":"option","doc":"Defines an option that becomes a named argument of `.render`.\n\n```\noption name : type = default\n```\n\n- **name**: (required) the local variable name for the option that can be used in `value`, `if` or `unless`.\n- **type**: the type of the option.\n- **default**: the default value of the option.","summary":"<p>Defines an option that becomes a named argument of <code>.render</code>.</p>","abstract":false,"args":[{"name":"decl","doc":null,"default_value":"","external_name":"decl","restriction":""}],"args_string":"(decl)","location":{"filename":"src/crinder/option.cr","line_number":11,"url":null},"def":{"name":"option","args":[{"name":"decl","doc":null,"default_value":"","external_name":"decl","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if decl.is_a?(TypeDeclaration)\n  name = decl.var.id\n  type = decl.type\n  value = decl.value\n  OPTIONS[name] = {} of Nil => Nil\n  OPTIONS[name][:type] = type\n  if !value.is_a?(Nop)\n    OPTIONS[name][:default] = value\n  end\nelse\n  if decl.is_a?(Assign)\n    name = decl.target.id\n    value = decl.value\n    OPTIONS[name] = {} of Nil => Nil\n    OPTIONS[name][:default] = value\n  else\n    OPTIONS[decl.id] = {} of Nil => Nil\n  end\nend %}\n\n  \n"}}],"types":[]}]}]}})